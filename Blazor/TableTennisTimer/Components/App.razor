@using System;
@using System.Diagnostics;
@using System.Media;
@using System.Threading.Tasks;
@using System.Timers;
@using Microsoft.AspNetCore.Components;
@using ScreenWakeLockDemo.Services
@using static System.Console;
@inject IJSRuntime JSRuntime
@inject IScreenWakeLockService ScreenWakeLockService
@implements IDisposable
@implements IAsyncDisposable

<PageTitle>TennisTimer</PageTitle>

<EditForm EditContext="this.editContext">
  <div class="centered-div" style="background-color: #040;">
    <div style="width: @court.progress%;" class="progress-bar"></div>
    <div style="width: @court.regress%;"></div>
  </div>
  <div class="centered-div">
    @court.countdownString
  </div>
  <div class="topmost-div">
    @* <h1>@court.CourtName</h1> *@
    <span title="Play period in minutes">Minutes&nbsp;</span>
    <span>
      <InputRadioGroup @bind-Value="court.SelectPeriodInMin">
        @foreach (var option in court.PlayPeriods)
        {
          <InputRadio Value="option.PeriodInMin" style="width: 22px; height: 22px; margin-left: 26px;" id="@option.PeriodInMin" />
          <label for="@option.PeriodInMin">@option.PeriodInMin</label>
        }
      </InputRadioGroup>
    </span>
  </div>
  <div class="right-div">
    @if (court.IsAudible)
    {
      <button @onclick="@court.ClickHandlerCs1">1min</button>
      <button @onclick="@court.ClickHandlerCs2">Rota</button>
    }
    @*
    <button onclick="document.getElementById('Intro').play()">JS</button> <br />
    *@
    @if (_isSupported)
    {
      <button @onclick="ToggleWakeLock" style="color: green;">@(_isLocked ? "Disable" : "Enable") wake lock</button>
    }
    else
    {
      <p style="color: red;">The browser does not support the screen wake lock API.</p>
    }
    <InputCheckbox style="width: 26px; height: 26px; margin: 10px;" ValueChanged="@((e) => @court.CheckboxChanged(e))" ValueExpression="@(() => @court.IsAudible)" id="exampleI" />
    <label for="exampleI">Audio</label>
  </div>
  <div class="bottom-div">
    @court.report&nbsp;&nbsp;&nbsp;@court.error
    @*    <button @onclick="OnClick" class="btn btn-dark" >Ok</button>    *@
  </div>
  <div class="hidden-div ">
    <audio id="sound2" autoplay controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="Power" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="Fanfare" controls><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3" }></audio>
    <audio id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></audio>
  </div>
</EditForm>

@code {
  ModelCourt court;
  EditContext editContext; // https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
  WakeLockSentinel? _sentinel;
  bool _isSupported, _isLocked, _isCheck; public bool isCheck { get { return _isCheck; } set { _isCheck = value; } }    //CheckValueStrChanged.InvokeAsync(value.ToString()); // https://stackoverflow.com/questions/74044673/blazor-inputcheckbox-binding-to-string-backing-field

  public App()
  {
    court = new ModelCourt() { CourtName = "All Tables", SelectPeriodInMin = 10, JSRuntime = JSRuntime };
    editContext = new EditContext(court);
  }
  protected override async Task OnInitializedAsync()
  {
    court.JSRuntime = JSRuntime;
    await base.OnInitializedAsync();
    _isSupported = await ScreenWakeLockService.IsSupportedAsync(); // Check if the browser supports the screen wake lock API
    await court.MainLoopTask(StateHasChanged);    // return Task.CompletedTask;
  }

  async Task ToggleWakeLock()
  {
    try
    {
      if (_isLocked)
      {
        await ScreenWakeLockService.ReleaseWakeLockAsync(_sentinel);
        _sentinel = null;
        _isLocked = false;
      }
      else
      {
        _sentinel = await ScreenWakeLockService.RequestWakeLockAsync();
        _isLocked = true;
      }
    }
    catch (Exception err) { court.error = $"{err.GetType().Name}.{nameof(ToggleWakeLock)}, {err.Message}"; WriteLine(err); }
  }

  public class PlayPeriod
  {
    public PlayPeriod(int p) { PeriodInMin = p; }
    public int PeriodInMin { get; set; } = 22;
    public bool IsSelected { get; set; }
  }

  public class ModelCourt
  {
    DateTime nextTime = DateTime.Now;
    object? wakeLock;
    public bool isLooping = true;
    public string countdownString = "";
    public string report = "";
    public string error = "";
    public double progress = 33, regress = 67;
    public IJSRuntime JSRuntime { get; set; }
    public string CourtName { get; set; } = "xx";
    int selectPeriodInMin; public int SelectPeriodInMin { get { return selectPeriodInMin; } set { selectPeriodInMin = value; } }

    public List<PlayPeriod> PlayPeriods { get; set; } = new List<PlayPeriod>() { new PlayPeriod(10), new PlayPeriod(15), new PlayPeriod(30) };

    [Parameter] public bool IsAudible { get; set; } = false;
    public void CheckboxChanged(bool e)
    {
      IsAudible = e;
      report = $"Turning Audio {(IsAudible ? "ON" : "Off")}.  e = {e}.";
    }

    public async Task MainLoopTask(Action StateHasChanged)
    {
      await RequestWakeLock();

      while (isLooping)
      {
        DateTime now = DateTime.Now;
        SetAndShowNextTime();

        while (isLooping && now < nextTime)
        {
          int prev = selectPeriodInMin;
          await Task.Delay(999);
          if (prev != selectPeriodInMin) // if the user changed the time, then reset the timer
          {
            SetAndShowNextTime();
          }

          now = DateTime.Now;
          double secondsLeft = (nextTime - now).TotalSeconds;
          countdownString = $"{(nextTime - now):m\\:ss}";
          progress = ((100 * (selectPeriodInMin * 60 - secondsLeft) / (selectPeriodInMin * 60)));
          regress = 100 - progress;

          if (secondsLeft <= 60 && secondsLeft > 56) // a sound when there is 1 minute regress
          {
            StateHasChanged(); // await InvokeAsync(StateHasChanged);
            await PlayWavFilesAsync(1);
          }

          StateHasChanged(); // await InvokeAsync(StateHasChanged);
        } // while (now < nextTime)

        if (isLooping)
        {
          countdownString = "Rotate!";
          StateHasChanged(); // await InvokeAsync(StateHasChanged);
          await PlayWavFilesAsync(2);
        }
        else
        {
          countdownString = "■ ■";
          error = "·";
        }
      } // while (isLooping)

      await Task.Delay(250); // collides with the "Wake Lock released" sound. ...on NG.

      await PlayResource("Chirp");
    }

    void SetAndShowNextTime()
    {
      var now = DateTime.Now;
      nextTime = now.AddMinutes(selectPeriodInMin - now.Minute % selectPeriodInMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    }

    public async void ClickHandlerCs1() { await PlayWavFilesAsync(1); }
    public async void ClickHandlerCs2() { await PlayWavFilesAsync(2); }
    async Task PlayWavFilesAsync(int i)
    {
      switch (i)
      {
        case 1:
          await PlayResource("Power");
          await Task.Delay(350);
          await PlayResource(GetLastMinute());
          // await Task.Delay(2000);
          break;
        default:
          await PlayResource("Fanfare");
          await Task.Delay(4500);
          await PlayResource(GetTimeToChange());
          // await Task.Delay(1000);
          break;
      }
    }
    async Task PlayResource(string filePath)
    {
      if (IsAudible)
      {
        report = $"Playing {filePath}.";
        await JSRuntime.InvokeAsync<string>("PlayAudio", filePath);
      }
      else
      {
        report = "Audio is off.";
      }
    }

    string GetLastMinute()
    {
      string[] stringArr = new string[] {
      "angryLastMinute",      //      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
      "calmLastMinute",       //      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
      "cheerfulLastMinute",   //      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
      "gentleLastMinute",     //      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
      "sadLastMinute",        //      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
      "seriousLastMinute" };  //      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
      return stringArr[new Random().Next(stringArr.Length)];
    }

    string GetTimeToChange()
    {
      string[] stringArr = new string[] {
      "angryRotate",      //       "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
      "calmRotate",       //       "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
      "cheerfulRotate",   //       "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
      "gentleRotate",     //       "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
      "sadRotate",        //       "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
      "seriousRotate" };  //       "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
      return stringArr[new Random().Next(stringArr.Length)];
    }

    async Task RequestWakeLock()
    {
      try
      {
        wakeLock = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", "screen"); //todo: if nogo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29
        report = "Wake Lock is active!";
      }
      catch (Exception err) { error = $"{err.GetType().Name}.{nameof(RequestWakeLock)}, {err.Message}"; WriteLine(error); }
    }

    public async Task ReleaseWakeLockAsync() // Note that a screen wake lock will be automatically released when the user minimises the tab or window, or switches away from a tab or window where the screen wake lock is active.
    {
      if (wakeLock == null)
        return;


      try
      {
        WriteLine("▄▀▄▀▄▀▄ ReleaseWakeLockAsync ...");
        //todo: await JSRuntime.InvokeAsync<object>("navigator.wakeLock.release", wakeLock);         // Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100] Unhandled exception rendering component: Could not find 'navigator.wakeLock.release' ('release' was undefined).
        //todo: if nogo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29
        wakeLock = null;
        report = "Wake Lock released";
        await Task.Delay(1000);
        WriteLine("▄▀▄▀▄▀▄ ReleaseWakeLockAsync  Wake Lock released ▄▀▄▀▄▀▄ ");

        // await PlayResourse("LockReleased");
        // await Task.Delay(1000);
        await Task.CompletedTask;
      }
      catch (Exception err) { error = $"{err.GetType().Name}.{nameof(ReleaseWakeLockAsync)}, {err.Message}"; WriteLine(error); }
    }
    public void ReleaseWakeLock()
    {
      WriteLine("▄▀▄▀▄▀▄ ReleaseWakeLock");
    }
  }

  public async ValueTask DisposeAsync()
  {
    WriteLine("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  DisposeAsync() ");
    court.isLooping = false;
    await court.ReleaseWakeLockAsync();
  }
  public bool IsDisposed { get; private set; }
  public void Dispose()
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  Dispose()  IsDisposed: {IsDisposed}");
    if (IsDisposed)
      return;

    court.isLooping = false;
    court.ReleaseWakeLock();

    IsDisposed = true;
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if (firstRender)
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //   else
  //   {
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //     await Task.Yield(); ReleaseWakeLock();
  //   }
  // }
}