@page "/"
@inject IJSRuntime JSRuntime
@inject IScreenWakeLockService ScreenWakeLockService
@inject IWebEventLoggerService WebEventLoggerService
@implements IDisposable
@implements IAsyncDisposable
<PageTitle>Main</PageTitle>

<EditForm EditContext="this.editContext">
  <div class="flexVertical">
    <div class="flexHorizontal zIndexTop">
      <div class="left160 vertCenter">
        <InputRadioGroup @bind-Value="court.SelectPeriodInMin">
          @foreach (var option in court.PlayPeriods)
          {
            <InputRadio Value="option.PeriodInMin" id="@option.PeriodInMin" class="nogo1" style="margin-left: 10px;" />
            <label for="@option.PeriodInMin" style="margin-right: 26px;">@option.PeriodInMin</label>
          }
        </InputRadioGroup>
      </div>
      <div class="vertCenter" style="width: 140px; margin-left: 15px;">
        <label style="color: #fb0; font-size: 12px;" for="chkRound">Next &nbsp;</label>
        <InputCheckbox id="chkRound" @bind-Value="court.IsRoundedMode" />
        <label style="color: #fb0;" for="chkRound">@court.NextTime_String</label>
      </div>

      @if (court.Initiated == false)
      {
        <button @onclick="@court.StartAsync" class="button" style="color: #0a0; margin-left: 0; margin-right: 0;">Start</button>
      }
      else
      {
        <button @onclick="@court.StopButton" class="button" style="color: #c00; margin-left: 0; margin-right: 0;">Stop</button>
      }
    </div>
    @if (court.Initiated == false)
    {
      <div class="flexHorizontal">
        <div class="backgroundPanel left160" style="border: 0px; background-color: transparent;"></div>
        <div style="width: 140px; margin-left: 15px;">
          <pre style="color: #fb0; font-size: 18px;">@court.NextTimesString</pre>
          <label style="color: #fb0; font-size: 12px;" for="chkRound">Next &nbsp;</label>
          <InputCheckbox id="chkRound" @bind-Value="court.IsRoundedMode" />
          <label style="color: #fb0;" for="chkRound">@court.NextTime_String</label>
        </div>
      </div>
    }
    else
    {
      <div class="flexHorizontal">
        <div class="backgroundPanel progress" style="width: @court.Progress%;"></div>
        <div class="backgroundPanel regress " style="width: @court.Regress%; "></div>
      </div>
      <div class="absolutePanel">
        <div class="centerHoriz">
          <div class="centerVerti">
            <div class="mmss">
              @court.CountdownString
            </div>
          </div>
        </div>
      </div>
    }

    <div class="centerHoriz"><pre style="color: #f30;">@court.Error</pre></div>

    <div class="flexHorizontal flexRight vertCenter zIndexTop" style="margin: 16px;">
      @if (court.IsDebug)
      {
        @* <img src="icon-512.png" height="16" width="16" /> &nbsp;            <img src="icon-192.png" height="16" width="16" /> &nbsp; *@
        @if (court.IsAudible)
        {
          <button @onclick="@court.PlayIntro">Intro</button>
          <button @onclick="@court.PlayLastM">LastM</button>
          <button @onclick="@court.PlayRotat">Rotat</button>
          <button @onclick="@court.PlayChirp">Chirp</button>
          <button @onclick="@court.PlayAllMs" style="color: #f80;">All!!</button>
          @* No sound:          <button @onclick="@court.PlayIntrQ">IntrQ</button>          <button @onclick="@court.PlayLastQ">LastQ</button>          <button @onclick="@court.PlayRotaQ">RotaQ</button>          <button @onclick="@court.PlayChirQ">ChirQ</button>*@
        }

        @if (_isWakeLockSupported == true)
        {
          <button id="wake-lock-btn" @onclick="ToggleWakeLock" style="color: #0c0;">@(_isWakeLocked ? "Stop" : "Start") WL</button>
          <label style="color: #08f; margin-right: 32px;">            @(court.IsDebug ? @court.WLReport : "")          </label>
        }
        else @if (_isWakeLockSupported == false)
        {
          <h2 style="color: red;">The browser does not support the screen wake lock API.</h2>
        }

        @* <button @onclick="@GetMemberSinceToReport">Get M-Since</button> *@
        @* <InputCheckbox class="nogo1" style="margin: 10px;" ValueChanged="@((e) => @court.CheckboxChanged(e))" ValueExpression="@(() => @court.IsAudible)" id="chkAudio" checked="@court.IsAudible" /> *@
        @* <button onclick="document.getElementById('Intro').play()">JS</button> <br />    *@
      }
      else
      {
        <div><span>&nbsp;</span></div>
      }

      <span>
        <InputCheckbox class="nogo1" id="chkAudio" @bind-Value="court.IsAudible" /><label class="otherColor" for="chkAudio">&nbsp;Audio &nbsp; &nbsp; &nbsp; &nbsp;</label>
      </span>
      <span>
        <InputCheckbox class="nogo1" id="chkDebug" @bind-Value="court.IsDebug" /><label class="otherColor" for="chkDebug">&nbsp;Dbg &nbsp; &nbsp; &nbsp; &nbsp; </label>
      </span>
    </div>

    <div class="centerHoriz">
      <div>
        <br /><br /><h1 style="color: #fff"> Scan to share me:</h1>
        <img src="qrcode_tabletennistimer.azurewebsites.net.png" height="360" />
        <br />
      </div><br />
    </div><br />

    <div><pre style="color: #fa0">@court.Report</pre></div>
  </div>

  <div style="visibility: collapse;">
    <video id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3"></video>
    <video id="LastM" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></video>
    <video id="Rotat" controls><source src="Audio/Good - Fanfare.7.mp3"></video>
    <video id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></video>
    <video id="IntrQ" controls muted><source src="Audio/Start - Arcade Alarm.mp3"></video>     @* type="audio/mpeg" *@
    <video id="LastQ" controls muted><source src="Audio/Start - Arcade Power Up.7.mp3"></video>
    <video id="RotaQ" controls muted><source src="Audio/Good - Fanfare.7.mp3"></video>
    <video id="ChirQ" controls muted><source src="Audio/Start - Arcade Chirp Descend.mp3"></video>
    <video id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></video>
    <video id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></video>
    <video id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></video>
    <video id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></video>
    <video id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></video>
    <video id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"></video>
    <video id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></video>
    <video id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></video>
  </div>
</EditForm>

@code {
  const string eval = "eval", version = "130.2141";
  ModelCourt court;
  EditContext editContext; // https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
  IJSObjectReference? module;

  public Home()
  {
    court = new ModelCourt(StateHasChanged, async () => await SetWakeLockOn(), async () => await SetWakeLockOff());
    editContext = new EditContext(court);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");

    if (firstRender)
    {
      module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
      // try { await module.InvokeVoidAsync("toggleWakeLock"); } catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(ToggleWakeLock)}, {err.Message}"; WriteLine(err); }    if (_isWakeLocked)      await SetWakeLockOff();    else      await SetWakeLockOn();
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await court.OnInitializedAsync();
    court.JSRuntime = JSRuntime;                          // keep here: is not working from the ctor!!!
    court.WebEventLoggerService = WebEventLoggerService;  // keep here: is not working from the ctor!!!
    _isWakeLockSupported = await ScreenWakeLockService.IsSupportedAsync();
    // await SetWakeLockOn(); //nogo: nor audio, nor wake lock is working on iPhone from here ==> manual start by user interaction.
    await GetMemberSinceToReport(version);
  }

  async Task GetMemberSinceToReport(string evName)
  {
    try
    {
      court.WebEventLog = new WebEventLog
        {
          BrowserSignature = await getBrowserId(),
          FirstVisitId = await getMemberSince(),
          EventName = $"ttt·{evName}",
          DoneAt = DateTime.Now
        };
      court.Report += $"Ver: {version}\r\nMember since: {court.WebEventLog.FirstVisitId} \r\n{court.WebEventLog.BrowserSignature} \r\n";
      // court.Report += await WebEventLoggerService.LogEventAsync("memberSince", court.WebEventLog); :no point to log this event, as mostly it is either the developer or web crawler => not a real usage.
      // await TextDbContext.AddStringAsync($"{GetType().FullName}.Put({court.Report})");
    }
    catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(GetMemberSinceToReport)}, {err.Message}"; WriteLine(err); }
  }

  async Task<string> getBrowserId()
  {
    try
    {
      var w = await JSRuntime.InvokeAsync<int>(eval, "window.screen.width");
      var h = await JSRuntime.InvokeAsync<int>(eval, "window.screen.height");
      var d = await JSRuntime.InvokeAsync<int>(eval, "window.screen.colorDepth");
      // var u = await JSRuntime.InvokeAsync<object>(id, "window.screen");

      var userAgentRAW = await JSRuntime.InvokeAsync<string>(eval, "navigator.userAgent");
      var userAgentArray = userAgentRAW.Split(new[] { "Mozilla/5.0 (", ") AppleWebKit/", "(KHTML, like Gecko)" }, StringSplitOptions.RemoveEmptyEntries);
      var csv = $"{userAgentArray.FirstOrDefault()?.Trim()}│{userAgentArray[1]?.Trim()}│{userAgentArray.LastOrDefault()?.Trim()}│"
              + $"{await JSRuntime.InvokeAsync<int>(eval, "navigator.hardwareConcurrency")}│"
              + $"{await JSRuntime.InvokeAsync<string>(eval, "navigator.platform")}│"
              + $"{await JSRuntime.InvokeAsync<string>(eval, "navigator.languages.toString()")}│"
              + $"{w}x{h}x{d}│zone│gpu│gpv│";

      return csv;
    }
    catch (Exception ex) { return $"{ex.Message}|{ex.InnerException?.Message}|{ex.InnerException?.InnerException?.Message}"; }
  }

  WakeLockSentinel? _wakeSentinel;
  bool _isWakeLocked;
  bool? _isWakeLockSupported = null;
  async Task ToggleWakeLock()
  {
    if (_isWakeLocked) await SetWakeLockOff(); else await SetWakeLockOn(); //nogo on my iPhone: try { await module.InvokeVoidAsync("toggleWakeLock"); } catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(ToggleWakeLock)}, {err.Message}"; WriteLine(err); }
  }
  async Task SetWakeLockOn()
  {
    try
    {
      if (_isWakeLocked)
        court.WLReport = "Already active!";
      else
      {
        // await module.InvokeVoidAsync("WakeLock");
        _wakeSentinel = await ScreenWakeLockService.RequestWakeLockAsync();

        _isWakeLocked = true;
        court.WLReport = $"Active!";
      }

      court.Error = "";
    }
    catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(SetWakeLockOn)}, {err.Message}"; WriteLine(err); }
  }
  async Task SetWakeLockOff()
  {
    try
    {
      if (_isWakeLocked)
      {
        _isWakeLocked = false;

        // await module.InvokeVoidAsync("WakeUnlock");
        if (_wakeSentinel is not null)
        {
          await ScreenWakeLockService.ReleaseWakeLockAsync(_wakeSentinel);
          _wakeSentinel = null;
        }
      }

      court.WLReport = "Released.";
    }
    catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(SetWakeLockOff)}, {err.Message}"; WriteLine(err); }
  }

  async Task<string>
  getMemberSince(string pieceOfCake = "LocalStoreTest")
  {
    try
    {
      var memberSinceStringKey = await GetCookie(pieceOfCake);
      if (memberSinceStringKey == null)
      {
        memberSinceStringKey = DateTimeOffset.Now.ToString();
        await SetCookie(pieceOfCake, memberSinceStringKey);
      }
      return memberSinceStringKey;
    }
    catch (Exception err)
    {
      Console.WriteLine($"{err.GetType().Name}, {err.Message}");
      return ($"ERROR in getMemberSince(): {err.GetType().Name}, {err.Message}");
    }
  }
  async Task SetCookie(string key, string value) { await JSRuntime.InvokeVoidAsync(eval, $"document.cookie = '{key}={value};path=/'"); }
  async Task<string>
    GetCookie(string key)
  {
    var cookie = await JSRuntime.InvokeAsync<string>
      (eval, $"document.cookie.split('; ').find(row => row.startsWith('{key}='))?.split('=')[1]"); return cookie;
  }
  async Task DeleteCookie(string key) { await JSRuntime.InvokeVoidAsync(eval, $"document.cookie = '{key}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/'"); }

  public async ValueTask DisposeAsync()
  {
    WriteLine("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  DisposeAsync() ");

    court.StopTimer();
    await SetWakeLockOff();
    if (module is not null) await module.DisposeAsync();
  }
  public bool IsDisposed { get; private set; }
  public async void Dispose()
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  Dispose()  IsDisposed: {IsDisposed}");
    if (IsDisposed)
      return;

    court.StopTimer();
    await SetWakeLockOff();
    if (module is not null) await module.DisposeAsync();

    IsDisposed = true;
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if (firstRender)
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //   else
  //   {
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //     await Task.Yield(); ReleaseWakeLock();
  //   }
  // }
}
