@page "/"
@inject IJSRuntime JSRuntime
@inject IScreenWakeLockService ScreenWakeLockService
@inject IWebEventLoggerService WebEventLoggerService
@implements IDisposable
@implements IAsyncDisposable

<PageTitle>TennisTimer</PageTitle>
<EditForm EditContext="this.editContext">

  <div class="mainRoot">
    <div class="row top" style="height: 3.5rem;">
      <div class="left">
        <span title="Play period in minutes">
          <InputRadioGroup @bind-Value="court.SelectPeriodInMin">
            @foreach (var option in court.PlayPeriods)
            {
              <InputRadio Value="option.PeriodInMin" class="px26x26" style="margin-left: 28px;" id="@option.PeriodInMin" />
              <label for="@option.PeriodInMin">@option.PeriodInMin</label>
            }
            <label>&nbsp;min</label>
          </InputRadioGroup>
        </span>
      </div>
      <div class="middle">
        <InputCheckbox class="px26x26" id="chkAudio" checked="@court.IsAudible" @bind-Value="court.IsAudible" /><label class="otherColor" for="chkAudio">Audio &nbsp; &nbsp;</label>
        <InputCheckbox class="px26x26" id="chkDebug" checked="@court.IsAudible" @bind-Value="court.IsDebug" /><label class="otherColor" for="chkDebug">Dbg &nbsp; &nbsp;</label>
      </div>
    </div>

    @if (court.Initiated == false)
    {
      <div class="Initiate">↑ ↑ ↑ </div>
      <div class="Initiate">Select desired play period</div>
      <div class="Initiate">&nbsp;</div>
      <div class="Initiate">&nbsp;</div>
    }
    else
    {
      <div class="row center">
        <div class="hCenterParent">
          <div class="hCenterChild">
            <h1>@court.countdownString</h1>
          </div>
          <div style="width: @court.progress%;" class="progress-bar progress"></div>
          <div style="width: @court.regress%; " class="progress-bar regress "></div>
        </div>
      </div>
    }

    <div class="row bottom" style="min-height: max-content;">
      <div><span style="color: #ffa">@court.error</span></div>
      @if (court.IsDebug)
      {
        <div><span style="color: #afa">@court.report</span></div>

        <div>
          @if (court.IsAudible)
          {
            <button @onclick="@court.ClickHandlerCs1">1min</button>
            <button @onclick="@court.ClickHandlerCs2">Rota</button>
          }

          @if (_isWakeLockSupported == true)
          {
            <button @onclick="ToggleWakeLock" style="color: green;">@(_isWakeLocked ? "Stop" : "Start") WL</button>
          }
          else @if (_isWakeLockSupported == false)
          {
            <p style="color: red;">The browser does not support the screen wake lock API.</p>
          }

          <button @onclick="@GetMemberSinceToReport">Since</button>

          @* <InputCheckbox class="px26x26" style="margin: 10px;" ValueChanged="@((e) => @court.CheckboxChanged(e))" ValueExpression="@(() => @court.IsAudible)" id="chkAudio" checked="@court.IsAudible" /> *@
          @*    <button onclick="document.getElementById('Intro').play()">JS</button> <br />    *@
        </div>
      }
    </div>
  </div>
  <div style="visibility: collapse;">
    <audio id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="Power" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="Fanfr" controls><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="IntrQ" controls :volume="0.1"><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="PoweQ" controls volume="0.1"><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="ChirQ" controls :volume="0.1"><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="FanfQ" controls :volume="0.1"><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3" }></audio>
    <audio id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></audio>
  </div>
</EditForm>

@code {
  ModelCourt court;
  EditContext editContext; // https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
  public Home()
  {
    court = new ModelCourt(StateHasChanged, () => SetWakeLockOn(), JSRuntime);
    editContext = new EditContext(court);
  }
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    court.JSRuntime = JSRuntime; // keep here: is not working from the ctor!!!

    _isWakeLockSupported = await ScreenWakeLockService.IsSupportedAsync(); // Check if the browser supports the screen wake lock API
                                                                           // await SetWakeLockOn();
                                                                           //nogo: nor audio, nor wake lock is working on iPhone from here ==> manual start by user interaction.
    await GetMemberSinceToReport();
  }

  async Task GetMemberSinceToReport()
  {
    court.report = "Getting...";
    await Task.Delay(1_000);
    court.report = $"Build: 23-11-02  ·  Member since: {await getMemberSince()}";
    await Task.Delay(1_000);
    //nor4wasm: court.report = await WebEventLoggerService.LogEventAsync("memberSince", court.report);
    // await TextDbContext.AddStringAsync($"{GetType().FullName}.Put({court.report})");
  }

  WakeLockSentinel? _wakeSentinel;
  bool _isWakeLocked;
  bool? _isWakeLockSupported = null;
  async Task ToggleWakeLock()
  {
    if (_isWakeLocked)
      await SetWakeLockOff();
    else
      await SetWakeLockOn();
  }
  async Task SetWakeLockOn()
  {
    try
    {
      if (_isWakeLocked)
        court.report = "Wake Lock is already active!";
      else
      {
        _wakeSentinel = await ScreenWakeLockService.RequestWakeLockAsync();
        _isWakeLocked = true;
        court.report = "Wake Lock is active!";
      }

      court.error = "";
    }
    catch (Exception err) { court.error = $"{err.GetType().Name}.{nameof(SetWakeLockOn)}, {err.Message}"; WriteLine(err); }
  }
  async Task SetWakeLockOff()
  {
    try
    {
      if (_isWakeLocked)
      {
        if (_wakeSentinel is not null)
        {
          await ScreenWakeLockService.ReleaseWakeLockAsync(_wakeSentinel);
          _wakeSentinel = null;
        }
        _isWakeLocked = false;
      }

      court.error = "";
      court.report = "Wake Lock is released.";
    }
    catch (Exception err) { court.error = $"{err.GetType().Name}.{nameof(SetWakeLockOff)}, {err.Message}"; WriteLine(err); }
  }

  async Task<string> getMemberSince(string pieceOfCake = "LocalStoreTest")
  {
    try
    {
      var memeberSinceStringKey = await GetCookie(pieceOfCake);
      if (memeberSinceStringKey == null)
      {
        memeberSinceStringKey = DateTimeOffset.Now.ToString();
        SetCookie(pieceOfCake, memeberSinceStringKey);
      }
      return memeberSinceStringKey;
    }
    catch (Exception err)
    {
      Console.WriteLine($"{err.GetType().Name}, {err.Message}");
      return ($"ERROR in getMemberSince(): {err.GetType().Name}, {err.Message}");
    }
  }
  async Task SetCookie(string key, string value) { await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = '{key}={value};path=/'"); }
  async Task<string> GetCookie(string key) { var cookie = await JSRuntime.InvokeAsync<string>("eval", $"document.cookie.split('; ').find(row => row.startsWith('{key}='))?.split('=')[1]"); return cookie; }
  async Task DeleteCookie(string key) { await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = '{key}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/'"); }

  public async ValueTask DisposeAsync()
  {
    WriteLine("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  DisposeAsync() ");
    court.IsLooping = false;
    await SetWakeLockOff();
  }
  public bool IsDisposed { get; private set; }
  public void Dispose()
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  Dispose()  IsDisposed: {IsDisposed}");
    if (IsDisposed)
      return;

    court.IsLooping = false;
    SetWakeLockOff();

    IsDisposed = true;
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if (firstRender)
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //   else
  //   {
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //     await Task.Yield(); ReleaseWakeLock();
  //   }
  // }
}