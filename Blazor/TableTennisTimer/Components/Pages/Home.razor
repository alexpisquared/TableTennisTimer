@page "/"
@using System.Timers
@using System.Diagnostics
@using Microsoft.AspNetCore.Components;
@using System;
@using System.Media;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

 Welcome to your new app.

@code {

  public class Properties_Resources
  {
    public static object Start___Arcade_Alarm { get; set; }
    public static object Silent_MP3 { get; set; }
    public static object Start___Arcade_Chirp_Descend { get; set; }
    public static object Start___Arcade_Power_Up7 { get; set; }
    public static object en_US_AriaNeural_1_00_100_whispering_Wake_Lock_released___7 { get; set; }
    public static object Good___Fanfare_7 { get; set; }
    public static object zh_CN_XiaomoNeural_1_00_100_angry_Last_minute_EQAQJ___7 { get; set; }
    public static object Start___Arcade_Alarm12 { get; set; }
    public static object Start___Arcade_Alarm13 { get; set; }
    public static object Start___Arcade_Alarm1r { get; set; }
    public static object Start___Arcade_Alarm14 { get; set; }
  }
  public class SoundPlayer
  {
    public object Stream { get; set; }
    public void Play()
    {
      Console.WriteLine("Playing sound");
    }
  }


  private bool isLooping = true;
  private int everyXMin = 10;
  private int percentComplete = 0;
  private string countdownString = "··:··";
  private string report = "";
  private string error = "no error";
  private DateTime nextTime = DateTime.Now;
  private string nextHHMM = "88:88";
  private int[] playPeriods = new int[] { 2, 10, 15, 20, 30, 999 };
  private object?[]? wakeLock;
  private readonly SoundPlayer soundEffect = new SoundPlayer(); // https://stackoverflow.com/questions/31776548/why-cant-javascript-play-audio-files-on-iphone-safari

  protected override async void OnInitialized()
  {
    try
    {
      this.soundEffect.Stream = Properties_Resources.Start___Arcade_Alarm;
      this.soundEffect.Play();
      this.error = "++++";
      await this.Delay(222);
    }
    catch (Exception err)
    {
      this.error = $"■  {err.GetType().Name}, {err.Message}";
      this.report = this.error;
      try
      {
        // this.soundEffect.Stream = new System.IO.MemoryStream(Properties_Resources.Silent_MP3);
      }
      catch (Exception err2)
      {
        this.error = $"■■ {err2.GetType().Name}, {err2.Message}";
        this.report = this.error;
      }
    }

    this.MainLoop();
  }

  private async void MainLoop()
  {
    this.wakeLock = null;

    try
    {
     // this.wakeLock = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", new object?[] { "screen" });
     //todo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29

      this.report = "Wake Lock is active!";
    }
    catch (Exception err)
    {
      this.error = $"{err.GetType().Name}, {err.Message}";
    }

    while (this.isLooping)
    {
      DateTime now = DateTime.Now;
      this.SetAndShowNextTime();

      while (this.isLooping && now < this.nextTime)
      {
        int prev = this.everyXMin;
        await this.Delay(950);
        if (prev != this.everyXMin) // if the user changed the time, then reset the timer
        {
          this.SetAndShowNextTime();
        }

        now = DateTime.Now;
        double secondsLeft = (this.nextTime - now).TotalSeconds;
        this.countdownString = $"{Math.Floor(secondsLeft / 60):00}:{Math.Floor(secondsLeft % 60):00}";
        this.percentComplete = (int)Math.Round((100 * (this.everyXMin * 60 - secondsLeft) / (this.everyXMin * 60)) * 10) / 10;

        if (secondsLeft <= 60 && secondsLeft > 56) // play a sound when there is 1 minute left
        {
          this.countdownString = "▓▓▓▓";
          await this.PlayWavFilesAsync(1);
        }
      } // while (now < this.nextTime)

      if (this.isLooping)
      {
        this.countdownString = "▄▀▄▀";
        await this.PlayWavFilesAsync(2);
      }
      else
      {
        this.countdownString = "■ ■";
        this.error = "·";
      }
    } // while (this.isLooping)

    await this.Delay(250); // collides with the "Wake Lock released" sound.
    this.soundEffect.Stream = Properties_Resources.Start___Arcade_Chirp_Descend;
  }

  private void SetAndShowNextTime()
  {
    DateTime now = DateTime.Now;
    this.nextTime = now.AddMinutes(this.everyXMin - now.Minute % this.everyXMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    this.nextHHMM = $"{this.nextTime.Hour:00}:{this.nextTime.Minute:00}";
  }

  private async Task Delay(int ms)
  {
    await Task.Delay(ms);
  }

  private async Task PlayWavFilesAsync(int i)
  {
    switch (i)
    {
      case 1:
        this.PlayResourse(Properties_Resources.Start___Arcade_Power_Up7);
        await this.Delay(2500);
        this.PlayResourse(Properties_Resources.zh_CN_XiaomoNeural_1_00_100_angry_Last_minute_EQAQJ___7);
        await this.Delay(2000);
        break;
      default:
        this.PlayResourse(Properties_Resources.Good___Fanfare_7);
        await this.Delay(5000);
        this.PlayResourse(this.GetTimeToChange());
        await this.Delay(1000);
        break;
    }
  }

  private async Task ReleaseWakeLock()
  {
    if (this.wakeLock != null)
    {
      try
      {
        await JSRuntime.InvokeAsync<object>("navigator.wakeLock.release", this.wakeLock);
        this.report = "Wake Lock released";
        this.wakeLock = null;
      }
      catch (Exception err)
      {
        this.error = $"{err.GetType().Name}, {err.Message}";
      }

      this.PlayResourse(Properties_Resources.en_US_AriaNeural_1_00_100_whispering_Wake_Lock_released___7);
      await this.Delay(1000);
    }
  }

  private void PlayResourse(/* System.IO.Stream */object stream)
  {
    this.soundEffect.Stream = stream;
    this.soundEffect.Play();
  }

  private string GetLastMinute()
  {
    string[] stringArr = new string[] {
                 "zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
    return $"Assets/Media/{stringArr[new Random().Next(stringArr.Length)]}";
  }

  private string GetTimeToChange()
  {
    string[] stringArr = new string[] {
                 "zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
                 "zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
    return $"Assets/Media/{stringArr[new Random().Next(stringArr.Length)]}";
  }
}