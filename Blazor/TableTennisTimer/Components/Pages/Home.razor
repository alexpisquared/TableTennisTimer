@page "/"
@using System;
@using System.Diagnostics;
@using System.Media;
@using System.Threading.Tasks;
@using System.Timers;
@using Microsoft.AspNetCore.Components;
@using ScreenWakeLockDemo.Services
@using static System.Console;
@inject IJSRuntime JSRuntime
@inject IScreenWakeLockService ScreenWakeLockService
@implements IDisposable
@implements IAsyncDisposable

<PageTitle>TennisTimer</PageTitle>
<EditForm EditContext="this.editContext">

  <div class="mainRoot">
    <div class="row top" style="height: 3.5rem;">
      <div class="left">
        <span title="Play period in minutes">
          <InputRadioGroup @bind-Value="court.SelectPeriodInMin">
            @foreach (var option in court.PlayPeriods)
            {
              <InputRadio Value="option.PeriodInMin" class="px26x26" style="margin-left: 26px;" id="@option.PeriodInMin" />
              <label for="@option.PeriodInMin">@option.PeriodInMin</label>
            }
            <label>&nbsp;min</label>
          </InputRadioGroup>
        </span>
      </div>
      <div class="middle">
        <InputCheckbox class="px26x26" id="chkAudio" checked="@court.IsAudible" @bind-Value="court.IsAudible" /><label for="chkAudio">Audio &nbsp; &nbsp;</label>
        <InputCheckbox class="px26x26" id="chkDebug" checked="@court.IsAudible" @bind-Value="court.IsDebug" /><label for="chkDebug">Dbg &nbsp; &nbsp;</label>
      </div>
    </div>

    @if (court.Initiated == false)
    {
      <div class="Initiate">↑ ↑ ↑  Select </div>
    }
    else
    {
      <div class="row center">
        <div class="hCenterParent">
          <div class="hCenterChild">
            <h1>@court.countdownString</h1>
          </div>
          <div style="width: @court.progress%;" class="progress-bar-progress"></div>
          <div style="width: @court.regress%; " class="progress-bar-regress"></div>
        </div>
      </div>
    }

    <div class="row bottom" style="min-height: max-content;">
      <div><span style="color: #ffa">@court.error</span></div>
      @if (court.IsDebug)
      {
        <div><span style="color: #afa">@court.report</span></div>

        <div>
          @if (court.IsAudible)
          {
            <button @onclick="@court.ClickHandlerCs1">1min</button>
            <button @onclick="@court.ClickHandlerCs2">Rota</button>
          }

          @if (_isWakeLockSupported == true)
          {
            <button @onclick="ToggleWakeLock" style="color: green;">@(_isWakeLocked ? "Stop" : "Start") WL</button>
          }
          else @if (_isWakeLockSupported == false)
          {
            <p style="color: red;">The browser does not support the screen wake lock API.</p>
          }
          @* <InputCheckbox class="px26x26" style="margin: 10px;" ValueChanged="@((e) => @court.CheckboxChanged(e))" ValueExpression="@(() => @court.IsAudible)" id="chkAudio" checked="@court.IsAudible" /> *@
          @*    <button onclick="document.getElementById('Intro').play()">JS</button> <br />    *@
        </div>
      }
    </div>
  </div>
  <div style="visibility: collapse;">
    <audio id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="Power" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="Fanfr" controls><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="IntrQ" controls :volume="0.1"><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="PoweQ" controls volume="0.1"><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="ChirQ" controls :volume="0.1"><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="FanfQ" controls :volume="0.1"><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3" }></audio>
    <audio id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></audio>
  </div>
</EditForm>

@code {
  ModelCourt court;
  EditContext editContext; // https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
  public Home()
  {
    court = new ModelCourt(StateHasChanged, () => SetWakeLockOn(), JSRuntime);
    editContext = new EditContext(court);
  }
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    court.JSRuntime = JSRuntime; // keep here: is not working from the ctor!!!

    _isWakeLockSupported = await ScreenWakeLockService.IsSupportedAsync(); // Check if the browser supports the screen wake lock API
                                                                           // await SetWakeLockOn();
                                                                           //nogo: nor audio, nor wake lock is working on iPhone from here ==> manual start by user interaction.
  }

  WakeLockSentinel? _wakeSentinel;
  bool _isWakeLocked;
  bool? _isWakeLockSupported = null;
  async Task ToggleWakeLock()
  {
    if (_isWakeLocked)
      await SetWakeLockOff();
    else
      await SetWakeLockOn();
  }
  async Task SetWakeLockOn()
  {
    try
    {
      if (_isWakeLocked)
        court.report = "Wake Lock is already active!";
      else
      {
        _wakeSentinel = await ScreenWakeLockService.RequestWakeLockAsync();
        _isWakeLocked = true;
        court.report = "Wake Lock is active!";
      }

      court.error = "";
    }
    catch (Exception err) { court.error = $"{err.GetType().Name}.{nameof(SetWakeLockOn)}, {err.Message}"; WriteLine(err); }
  }
  async Task SetWakeLockOff()
  {
    try
    {
      if (_isWakeLocked)
      {
        if (_wakeSentinel is not null)
        {
          await ScreenWakeLockService.ReleaseWakeLockAsync(_wakeSentinel);
          _wakeSentinel = null;
        }
        _isWakeLocked = false;
      }

      court.error = "";
      court.report = "Wake Lock is released.";
    }
    catch (Exception err) { court.error = $"{err.GetType().Name}.{nameof(SetWakeLockOff)}, {err.Message}"; WriteLine(err); }
  }

  public class PlayPeriod
  {
    public PlayPeriod(int min) { PeriodInMin = min; }
    public int PeriodInMin { get; set; } = 22;
    public bool IsSelected { get; set; }
  }

  public class ModelCourt
  {
    DateTime nextTime = DateTime.Now;
    object? wakeLock_OLD;
    public string countdownString = "↑ Select";
    public string report = "";
    public string error = "";
    public double progress = 0, regress = 0;
    public IJSRuntime JSRuntime { get; set; }
    int selectPeriodInMin;
#if DEBUG
   const bool isDebug = true;
#else
    const bool isDebug = false;
#endif

    public int SelectPeriodInMin
    {
      get { return selectPeriodInMin; }
      set
      {
        selectPeriodInMin = value;
        report = $"{value} min    IsLooping: {IsLooping}";
        Task.Run(async () =>
        {
          Initiated = true;
          SetWakeLockOn.Invoke();
          await PlayResource("Intro", 1.0); await Task.Delay(99);
          await PlayResource("Power", 0.1); await Task.Delay(99);
          await PlayResource("Fanfr", 0.1);
          if (IsLooping != true)
            await MainLoopTask();
        });
      }
    }

    public List<PlayPeriod> PlayPeriods { get; set; } = new List<PlayPeriod>() { new PlayPeriod(10), new PlayPeriod(15), new PlayPeriod(30) };

    [Parameter] public bool Initiated { get; set; } = false;
    [Parameter] public bool IsAudible { get; set; } = true;
    [Parameter] public bool IsLooping { get; set; }
    [Parameter] public bool IsDebug { get; set; } = isDebug;

    public ModelCourt(
      Action stateHasChanged,
      Action setWakeLockOn,
      IJSRuntime jsRuntime)
    {
      StateHasChanged = stateHasChanged;
      SetWakeLockOn = setWakeLockOn;
      JSRuntime = jsRuntime;
      IsAudible = !IsDebug;
    }

    Action SetWakeLockOn;
    Action StateHasChanged;

    public void CheckboxChanged(bool e) { report = $"Audio is {((IsAudible = e) ? "ON" : "Off")}."; }

    public async Task MainLoopTask()
    {
      IsLooping = true;

      while (IsLooping)
      {
        DateTime now = DateTime.Now;
        SetAndShowNextTime();

        while (IsLooping && now < nextTime)
        {
          int prev = selectPeriodInMin;
          await Task.Delay(999);
          if (prev != selectPeriodInMin) // if the user changed the time, then reset the timer
          {
            SetAndShowNextTime();
          }

          now = DateTime.Now;
          double secondsLeft = (nextTime - now).TotalSeconds;
          countdownString = $"{(nextTime - now):m\\:ss}";
          progress = ((100 * (selectPeriodInMin * 60 - secondsLeft) / (selectPeriodInMin * 60)));
          regress = 100 - progress;

          StateHasChanged(); // await InvokeAsync(StateHasChanged);

          if (58 <= secondsLeft && secondsLeft <= 60)
          {
            await PlayWavFilesAsync("Power", 1410, GetLastMinute());
            await Task.Delay(1_640);
          }
        } // while (now < nextTime)

        if (IsLooping)
        {
          countdownString = "Rotate";
          StateHasChanged(); // await InvokeAsync(StateHasChanged);
          await PlayWavFilesAsync("Fanfr", 5_590, GetTimeToChange());
        }
        else
        {
          countdownString = "■ ■";
          error = "·";
        }
      } // while (IsLooping)

      await Task.Delay(250); // collides with the "Wake Lock released" sound. ...on NG.

      await PlayResource("Chirp", .5);
    }

    void SetAndShowNextTime()
    {
      var now = DateTime.Now;
      nextTime = now.AddMinutes(selectPeriodInMin - now.Minute % selectPeriodInMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    }

    public async void ClickHandlerCs1() { await PlayWavFilesAsync("Power", 360, GetLastMinute()); }
    public async void ClickHandlerCs2() { await PlayWavFilesAsync("Fanfr", 4_500, GetTimeToChange()); }
    async Task PlayWavFilesAsync(string name, int delay, string speech)
    {
      await PlayResource(name);
      await Task.Delay(delay); // will not play speech if delay is too short.
      await PlayResource(speech);
    }
    public async Task PlayResource(string filePath, double volume = 1.0)
    {
      if (IsAudible)
      {
        report = $"{filePath}  ++playing...";
        //     await JSRuntime.InvokeAsync<string>("PlayAudio", filePath);
        // using (await JSRuntime.InvokeAsync<Task>("PlayAudio", $"<audio controls volume=\"{volume}\"><source src=\"{filePath}\" type=\"audio/mpeg\"></audio>"))
        // await JSRuntime.InvokeVoidAsync("setVolume", filePath, volume);
        using (await JSRuntime.InvokeAsync<Task>("PlayAudio", filePath, volume))
        {
          report = $"{filePath}  ++playing... has finished!";
        }
        report = $"{filePath}  ++playing... has finished! +++++++++++++++++";
      }
      else
      {
        report = $"{filePath} ...but Audio is off.";
      }
    }

    string GetLastMinute()
    {
      string[] stringArr = new string[] {
      "angryLastMinute",      //      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
      "calmLastMinute",       //      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
      "cheerfulLastMinute",   //      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
      "gentleLastMinute",     //      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
      "sadLastMinute",        //      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
      "seriousLastMinute" };  //      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
      return stringArr[new Random().Next(stringArr.Length)];
    }

    string GetTimeToChange()
    {
      string[] stringArr = new string[] {
      "angryRotate",      //       "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
      "calmRotate",       //       "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
      "cheerfulRotate",   //       "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
      "gentleRotate",     //       "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
      "sadRotate",        //       "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
      "seriousRotate" };  //       "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
      return stringArr[new Random().Next(stringArr.Length)];
    }

    async Task RequestWakeLock_nogoOnIPhone()
    {
      try
      {
        wakeLock_OLD = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", "screen"); //todo: if nogo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29
        report = "Wake Lock is  active -- !";
      }
      catch (Exception err) { error = $"{err.GetType().Name}.{nameof(RequestWakeLock_nogoOnIPhone)}, {err.Message}"; WriteLine(error); }
    }
  }

  public async ValueTask DisposeAsync()
  {
    WriteLine("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  DisposeAsync() ");
    court.IsLooping = false;
    await SetWakeLockOff();
  }
  public bool IsDisposed { get; private set; }
  public void Dispose()
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  Dispose()  IsDisposed: {IsDisposed}");
    if (IsDisposed)
      return;

    court.IsLooping = false;
    SetWakeLockOff();

    IsDisposed = true;
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if (firstRender)
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //   else
  //   {
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //     await Task.Yield(); ReleaseWakeLock();
  //   }
  // }
}