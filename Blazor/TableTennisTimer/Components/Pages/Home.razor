@page "/"
@inject IJSRuntime JSRuntime
@inject IScreenWakeLockService ScreenWakeLockService
@inject IWebEventLoggerService WebEventLoggerService
@implements IDisposable
@implements IAsyncDisposable

<PageTitle>Main</PageTitle>
<EditForm EditContext="this.editContext">
  <div class="mainRoot">
    <div class="row top" style="height: 3.5rem; z-index: 1;">
      <div class="left3">
        <span title="Play period in minutes">
          <InputRadioGroup @bind-Value="court.SelectPeriodInMin">
            @foreach (var option in court.PlayPeriods)
            {
              <InputRadio Value="option.PeriodInMin" class="px26x26" style="margin-left: 26px;margin-right: 1px;" id="@option.PeriodInMin" />
              <label for="@option.PeriodInMin">@option.PeriodInMin</label>
            }
            <label>&nbsp;min</label>
          </InputRadioGroup>
        </span>
      </div>
      <div class="right3">
      </div>
    </div>
  
  @if (court.Initiated == false)
    {
      <div class="Initiate">↑ ↑ ↑ </div>
      <div class="Initiate" style="font-size: 56px;">Select play period...</div>
      <div class="Initiate" >
        <div style="font-size: 13px;">...Selecting: </div>
        <div style="font-size: 13px;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="font-size: 16px;"><b>10</b></span> min triggers rotation at <span style="font-size: 16px;"><b>00, 10, 20, 30, 40, 50</b></span> ...</div>
        <div style="font-size: 13px;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="font-size: 16px;"><b>15</b></span> min triggers rotation at <span style="font-size: 16px;"><b>00, 15, 30, 45</b></span> ...</div>
        <div style="font-size: 13px;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="font-size: 16px;"><b>30</b></span> min triggers rotation at <span style="font-size: 16px;"><b>00 </b>and<b> 30</b></span> minutes past the hour.</div>
      </div>
      <div class="Initiate">&nbsp;</div>
    } else
    {
      <div class="flex-container">
        <div class="foreground">
          <div class="vc">
            <div class="hc">
              <div class="h1">
                @court.CountdownString
              </div>
            </div>
          </div>
        </div>
        <div style="width: @court.Progress%;" class="progress-bar progress"></div>
        <div style="width: @court.Regress%; " class="progress-bar regress "></div>
      </div>
    }      

    <div class="row bottom" style="min-height: max-content;">
      <div><span style="color: #f30">@court.Error</span></div>
      @if (court.IsDebug)
      {
        <div><pre style="color: #fa0">@court.Report</pre></div>
        <div>
          @if (court.IsAudible)
          {
            <button @onclick="@court.PlayIntro">Intro</button>
            <button @onclick="@court.PlayLastM">LastM</button>
            <button @onclick="@court.PlayRotat">Rotat</button>
            <button @onclick="@court.PlayChirp">Chirp</button>
            <button @onclick="@court.PlayIntrQ">IntrQ</button>
            <button @onclick="@court.PlayLastQ">LastQ</button>
            <button @onclick="@court.PlayRotaQ">RotaQ</button>
            <button @onclick="@court.PlayChirQ">ChirQ</button>
          }

          @if (_isWakeLockSupported == true)
          {
            <button @onclick="ToggleWakeLock" style="color: green;">@(_isWakeLocked ? "Stop" : "Start") WL</button>
          } else @if (_isWakeLockSupported == false)
          {
            <p style="color: red;">The browser does not support the screen wake lock API.</p>
          }

          <img src="icon-512.png" height="36" width="36" /> &nbsp;
          @* <button @onclick="@GetMemberSinceToReport">Get M-Since</button> *@
          <img src="icon-192.png" height="36" width="36" /> &nbsp;

          @* <InputCheckbox class="px26x26" style="margin: 10px;" ValueChanged="@((e) => @court.CheckboxChanged(e))" ValueExpression="@(() => @court.IsAudible)" id="chkAudio" checked="@court.IsAudible" /> *@
          @*    <button onclick="document.getElementById('Intro').play()">JS</button> <br />    *@
        </div>
      }
      else
      {
        <div><span>&nbsp;</span></div>
      }
    </div>
          
    <div class="left3"></div>
    <div class="right3"  style="height: 3.5rem; z-index: 1;">
      <InputCheckbox class="px26x26" id="chkAudio" checked="@court.IsAudible" @bind-Value="court.IsAudible" /><label class="otherColor" for="chkAudio">&nbsp;Audio &nbsp; &nbsp; &nbsp; &nbsp;</label>
      <InputCheckbox class="px26x26" id="chkDebug" checked="@court.IsDebug" @bind-Value="court.IsDebug" /><label class="otherColor" for="chkDebug">&nbsp;Dbg &nbsp; </label>
    </div>
  </div>
    
  <div class="flex-container">
    <div class="hc">
      <div><br /><br /><h1> Scan to share me:</h1>  <img src="qrcode_tabletennistimer.azurewebsites.net.png" height="360" /></div>
    </div>
  </div>

  <div style="visibility: collapse;">
    <audio id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="LastM" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="Rotat" controls><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="IntrQ" controls muted><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
    <audio id="LastQ" controls muted><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
    <audio id="RotaQ" controls muted><source src="Audio/Good - Fanfare.7.mp3"></audio>
    <audio id="ChirQ" controls muted><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
    <audio id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></audio>
    <audio id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3" }></audio>
    <audio id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></audio>
    <audio id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></audio>
  </div>
</EditForm>

@code {
  const string id = "eval", version = "0117.0";
  ModelCourt court;
  EditContext editContext; // https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
  public Home()
  {
    court = new ModelCourt(StateHasChanged, async () => await SetWakeLockOn());
    editContext = new EditContext(court);
  }
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    court.JSRuntime = JSRuntime; // keep here: is not working from the ctor!!!
    court.WebEventLoggerService = WebEventLoggerService; // keep here: is not working from the ctor!!!

    _isWakeLockSupported = await ScreenWakeLockService.IsSupportedAsync();
    // await SetWakeLockOn(); //nogo: nor audio, nor wake lock is working on iPhone from here ==> manual start by user interaction.
    await GetMemberSinceToReport(version);
  }

  async Task GetMemberSinceToReport(string evName)
  {
    try
    {
      court.WebEventLog = new WebEventLog
        {
          BrowserSignature = await getBrowserId(),
          FirstVisitId = await getMemberSince(),
          EventName = $"ttt-{evName}",
          DoneAt = DateTime.Now
        };
      court.Report += $"Ver: {version}\r\nMember since: {court.WebEventLog.FirstVisitId} \r\n{court.WebEventLog.BrowserSignature} \r\n"; 
      //? await Task.Delay(250);
      court.Report += await WebEventLoggerService.LogEventAsync("memberSince", court.WebEventLog);
      // await TextDbContext.AddStringAsync($"{GetType().FullName}.Put({court.Report})");
    } catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(GetMemberSinceToReport)}, {err.Message}"; WriteLine(err); }
  }

  async Task<string> getBrowserId()
  {
    try
    {
      var w = await JSRuntime.InvokeAsync<int>(id, "window.screen.width");
      var h = await JSRuntime.InvokeAsync<int>(id, "window.screen.height");
      var d = await JSRuntime.InvokeAsync<int>(id, "window.screen.colorDepth");
      // var u = await JSRuntime.InvokeAsync<object>(id, "window.screen");

      var userAgentRAW = await JSRuntime.InvokeAsync<string>(id, "navigator.userAgent");
      var userAgentArray = userAgentRAW.Split(new[] { "Mozilla/5.0 (", ") AppleWebKit/", "(KHTML, like Gecko)" }, StringSplitOptions.RemoveEmptyEntries);
      var csv = $"{userAgentArray.FirstOrDefault()?.Trim()}│{userAgentArray[1]?.Trim()}│{userAgentArray.LastOrDefault()?.Trim()}│"
              + $"{await JSRuntime.InvokeAsync<int>(id, "navigator.hardwareConcurrency")}│"
              + $"{await JSRuntime.InvokeAsync<string>(id, "navigator.platform")}│"
              + $"{await JSRuntime.InvokeAsync<string>(id, "navigator.languages.toString()")}│"
              + $"{w}x{h}x{d}│zone│gpu│gpv│";

      return csv;
    } catch (Exception ex) { return $"{ex.Message}|{ex.InnerException?.Message}|{ex.InnerException?.InnerException?.Message}"; }
  }

  WakeLockSentinel? _wakeSentinel;
  bool _isWakeLocked;
  bool? _isWakeLockSupported = null;
  async Task ToggleWakeLock()
  {
    if (_isWakeLocked)
      await SetWakeLockOff();
    else
      await SetWakeLockOn();
  }
  async Task SetWakeLockOn()
  {
    try
    {
      if (_isWakeLocked)
        court.Report += "Wake Lock is already active!";
      else
      {
        _wakeSentinel = await ScreenWakeLockService.RequestWakeLockAsync();
        _isWakeLocked = true;
        court.Report +=  $"{version}         Wake Lock is active!";
      }

      court.Error = "";
    } catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(SetWakeLockOn)}, {err.Message}"; WriteLine(err); }
  }
  async Task SetWakeLockOff()
  {
    try
    {
      if (_isWakeLocked)
      {
        if (_wakeSentinel is not null)
        {
          await ScreenWakeLockService.ReleaseWakeLockAsync(_wakeSentinel);
          _wakeSentinel = null;
        }
        _isWakeLocked = false;
      }

      court.Error = "";
      court.Report = "Wake Lock is released.";
    } catch (Exception err) { court.Error = $"{err.GetType().Name}.{nameof(SetWakeLockOff)}, {err.Message}"; WriteLine(err); }
  }

  async Task<string> getMemberSince(string pieceOfCake = "LocalStoreTest")
  {
    try
    {
      var memberSinceStringKey = await GetCookie(pieceOfCake);
      if (memberSinceStringKey == null)
      {
        memberSinceStringKey = DateTimeOffset.Now.ToString();
        await SetCookie(pieceOfCake, memberSinceStringKey);
      }
      return memberSinceStringKey;
    } catch (Exception err)
    {
      Console.WriteLine($"{err.GetType().Name}, {err.Message}");
      return ($"ERROR in getMemberSince(): {err.GetType().Name}, {err.Message}");
    }
  }
  async Task SetCookie(string key, string value) { await JSRuntime.InvokeVoidAsync(id, $"document.cookie = '{key}={value};path=/'"); }
  async Task<string> GetCookie(string key)
  {
    var cookie = await JSRuntime.InvokeAsync<string>
      (id, $"document.cookie.split('; ').find(row => row.startsWith('{key}='))?.split('=')[1]"); return cookie;
  }
  async Task DeleteCookie(string key) { await JSRuntime.InvokeVoidAsync(id, $"document.cookie = '{key}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/'"); }

  public async ValueTask DisposeAsync()
  {
    WriteLine("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  DisposeAsync() ");
    court.SetIsLooping(false);
    await SetWakeLockOff();
  }
  public bool IsDisposed { get; private set; }
  public async void Dispose()
  {
    WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀  Dispose()  IsDisposed: {IsDisposed}");
    if (IsDisposed)
      return;

    court.SetIsLooping(false);
    await SetWakeLockOff();

    IsDisposed = true;
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if (firstRender)
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //   else
  //   {
  //     WriteLine($"▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀ OnAfterRenderAsync {firstRender}.");
  //     await Task.Yield(); ReleaseWakeLock();
  //   }
  // }
}