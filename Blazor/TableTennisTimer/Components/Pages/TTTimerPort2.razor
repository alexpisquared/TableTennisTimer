@page "/tennis-timer"
@using System.Timers;
@using System.Diagnostics;
@using static System.Console;
@using Microsoft.AspNetCore.Components;
@using System;
@using System.Media;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime

<PageTitle>TennisTimer</PageTitle>

<h1>Tennis Timer</h1>

<audio id="sound1" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
<audio id="sound2" autoplay controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
<audio id="sound3" controls muted><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>

<button onclick="document.getElementById('sound1').play()">Play through Javascript</button>
<button onclick="document.getElementById('sound2').play()">Play through Javascript</button>
<button onclick="document.getElementById('sound3').play()">Play through Javascript</button>
<button @onclick="@ClickHandler">Play through C#</button>


<p>Countdown: @countdownString</p>
<p>Next time: @nextHHMM</p>
<p>Percent complete: @percentComplete%</p>
<p>Report: @report</p>
<p>Error: @error</p>

@code {
  private bool isLooping = true;
  private int everyXMin = 10;
  private int percentComplete = 0;
  private string countdownString = "··:··";
  private string report = "";
  private string error = "no error";
  private DateTime nextTime = DateTime.Now;
  private string nextHHMM = "88:88";
  private int[] playPeriods = new int[] { 2, 10, 15, 20, 30, 999 };
  private object? wakeLock;

  async void ClickHandler()
  {
    await JSRuntime.InvokeAsync<string>("PlaySound"); // this calls "window.PlaySound()"
    /*
  Also create this file: /js/PlaySound.js

  window.PlaySound = function() {
  document.getElementById('sound').play();
  }
  Also edit this file: /Pages/_Host.cshtml

  <head>
    <!-- Various other tags -->
    <script src="/js/PlaySound.js"></script>
  </head>
  Bottom line:

  Accept that you will need Javascript to do things like this.
  Don't bother using Blazor to call JS, unless you absolutely need Server Side stuff to determine if the Javascript code is going to be called and/or how.

  from   https://stackoverflow.com/questions/60006592/play-sound-on-the-client-in-blazor  2020-01
  ..or   https://exceptionnotfound.net/how-to-play-a-sound-with-blazor-and-javascript/    2020-10  the same thing as ^^
  */
  }

  protected override async Task OnInitializedAsync()
  {
    WriteLine("protected override async void OnInitializedAsync() ▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀");
    await base.OnInitializedAsync();
    await MainLoopTask();
  }

  async Task MainLoopTask()
  {
    wakeLock = null;

    try
    {
      wakeLock = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", "screen"); //todo: if nogo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29
      report = "Wake Lock is active!";
    }
    catch (Exception err)
    {
      error = $"{err.GetType().Name}, {err.Message}";
    }

    while (isLooping)
    {
      DateTime now = DateTime.Now;
      SetAndShowNextTime();

      while (isLooping && now < nextTime)
      {
        int prev = everyXMin;
        await Task.Delay(950);
        if (prev != everyXMin) // if the user changed the time, then reset the timer
        {
          SetAndShowNextTime();
        }

        now = DateTime.Now;
        double secondsLeft = (nextTime - now).TotalSeconds;
        countdownString = $"{Math.Floor(secondsLeft / 60):00}:{Math.Floor(secondsLeft % 60):00}";
        percentComplete = (int)Math.Round((100 * (everyXMin * 60 - secondsLeft) / (everyXMin * 60)) * 10) / 10;

        if (secondsLeft <= 60 && secondsLeft > 56) // play a sound when there is 1 minute left
        {
          countdownString = "▓▓▓▓";
          await PlayWavFilesAsync(1);
        }

        StateHasChanged(); // await InvokeAsync(StateHasChanged);
      } // while (now < nextTime)

      if (isLooping)
      {
        countdownString = "▄▀▄▀";
        await PlayWavFilesAsync(2);
      }
      else
      {
        countdownString = "■ ■";
        error = "·";
      }
    } // while (isLooping)

    await Task.Delay(250); // collides with the "Wake Lock released" sound.
                           // soundEffect.Src = "Audio\\Start - Arcade Chirp Descend.mp3"; // Commented out due to error
  }

  private void SetAndShowNextTime()
  {
    DateTime now = DateTime.Now;
    nextTime = now.AddMinutes(everyXMin - now.Minute % everyXMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    nextHHMM = $"{nextTime.Hour:00}:{nextTime.Minute:00}";
  }

  async Task PlayWavFilesAsync(int i)
  {
    switch (i)
    {
      case 1:
        await PlayResourse("Audio\\Start - Arcade Power Up.7.mp3");
        await Task.Delay(2500);
        await PlayResourse(GetLastMinute());
        await Task.Delay(2000);
        break;
      default:
        await PlayResourse("Audio\\Good - Fanfare.7.mp3");
        await Task.Delay(5000);
        await PlayResourse(GetTimeToChange());
        await Task.Delay(1000);
        break;
    }
  }

  async Task ReleaseWakeLock()
  {
    if (wakeLock != null)
    {
      await JSRuntime.InvokeAsync<object>("navigator.wakeLock.release", wakeLock);
      report = "Wake Lock released";
      WriteLine("Wake Lock released ▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀");
      wakeLock = null;
      await PlayResourse("Audio\\en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3");
      await Task.Delay(1000);
    }
  }

  async Task PlayResourse(string filePath)
  {
    await JSRuntime.InvokeVoidAsync("PlayAudioFile", "filePath");
  }

  string GetLastMinute()
  {
    string[] stringArr = new string[] {
      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
    return stringArr[new Random().Next(stringArr.Length)];
  }

  string GetTimeToChange()
  {
    string[] stringArr = new string[] {
      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
    return stringArr[new Random().Next(stringArr.Length)];
  }

  async ValueTask DisposeAsync()
  {
    isLooping = false;
    await ReleaseWakeLock();
  }
}
