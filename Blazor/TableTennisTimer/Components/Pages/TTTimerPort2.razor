@page "/tennis-timer"
@inject IJSRuntime JSRuntime

<h1>Tennis Timer</h1>

<audio controls>
  <source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg">
</audio>

<p>Countdown: @countdownString</p>
<p>Next time: @nextHHMM</p>
<p>Percent complete: @percentComplete%</p>
<p>Report: @report</p>
<p>Error: @error</p>

<button @onclick="() => { isLooping = !isLooping; }">@if (isLooping) { "Stop" } else { "Start" }</button>

@code {
  bool isLooping = false;
  int everyXMin = 10;
  int percentComplete = 0;
  string countdownString = "··:··";
  string report = "";
  string error = "no error";
  DateTime nextTime = DateTime.Now;
  string nextHHMM = "88:88";
  int[] playPeriods = new int[] { 2, 10, 15, 20, 30, 999 };
  object wakeLock;
  Audio soundEffect = new Audio();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      soundEffect.Autoplay = true;
      soundEffect.Src = "Audio\\Start - Arcade Alarm.mp3";
      error = "++++";
      await Delay(222);
    }
    catch (Exception err)
    {
      error = $"■  {err.GetType().Name}, {err.Message}";
      try
      {
        soundEffect.Src = "data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
      }
      catch (Exception err2)
      {
        error = $"■■ {err2.GetType().Name}, {err2.Message}";
      }
    }

    MainLoop();
  }

  async Task MainLoop()
  {
    wakeLock = null;

    try
    {
      wakeLock = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", "screen");
      report = "Wake Lock is active!";
    }
    catch (Exception err)
    {
      error = $"{err.GetType().Name}, {err.Message}";
    }

    while (isLooping)
    {
      DateTime now = DateTime.Now;
      SetAndShowNextTime();

      while (isLooping && now < nextTime)
      {
        int prev = everyXMin;
        await Delay(950);
        if (prev != everyXMin) // if the user changed the time, then reset the timer
        {
          SetAndShowNextTime();
        }

        now = DateTime.Now;
        double secondsLeft = (nextTime - now).TotalSeconds;
        countdownString = $"{Math.Floor(secondsLeft / 60):00}:{Math.Floor(secondsLeft % 60):00}";
        percentComplete = (int)Math.Round((100 * (everyXMin * 60 - secondsLeft) / (everyXMin * 60)) * 10) / 10;

        if (secondsLeft <= 60 && secondsLeft > 56) // play a sound when there is 1 minute left
        {
          countdownString = "▓▓▓▓";
          await PlayWavFilesAsync(1);
        }
      } // while (now < nextTime)

      if (isLooping)
      {
        countdownString = "▄▀▄▀";
        await PlayWavFilesAsync(2);
      }
      else
      {
        countdownString = "■ ■";
        error = "·";
      }
    } // while (isLooping)

    await Delay(250); // collides with the "Wake Lock released" sound.
    soundEffect.Src = "Audio\\Start - Arcade Chirp Descend.mp3";
  }

  private void SetAndShowNextTime()
  {
    DateTime now = DateTime.Now;
    nextTime = now.AddMinutes(everyXMin - now.Minute % everyXMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    nextHHMM = $"{nextTime.Hour:00}:{nextTime.Minute:00}";
  }

  async Task Delay(int ms) => await Task.Delay(ms);

  async Task PlayWavFilesAsync(int i)
  {
    switch (i)
    {
      case 1:
        PlayResourse("Audio\\Start - Arcade Power Up.7.mp3");
        await Delay(2500);
        PlayResourse(GetLastMinute());
        await Delay(2000);
        break;
      default:
        PlayResourse("Audio\\Good - Fanfare.7.mp3");
        await Delay(5000);
        PlayResourse(GetTimeToChange());
        await Delay(1000);
        break;
    }
  }

  async Task ReleaseWakeLock()
  {
    if (wakeLock != null)
    {
      await JSRuntime.InvokeAsync<object>("navigator.wakeLock.release", wakeLock);
      report = "Wake Lock released";
      Console.WriteLine("Wake Lock released");
      wakeLock = null;
      PlayResourse("Audio\\en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3");
      await Delay(1000);
    }
  }

  async Task PlayResourse(string filePath)
  {
    await JSRuntime.InvokeVoidAsync("PlayAudioFile", "filePath");
  } // => soundEffect.Src = filePath;

  string GetLastMinute()
  {
    string[] stringArr = new string[] {
      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
    return stringArr[new Random().Next(stringArr.Length)];
  }

  string GetTimeToChange()
  {
    string[] stringArr = new string[] {
      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
    return stringArr[new Random().Next(stringArr.Length)];
  }

  async ValueTask DisposeAsync()
  {
    isLooping = false;
    await ReleaseWakeLock();
  }
}
