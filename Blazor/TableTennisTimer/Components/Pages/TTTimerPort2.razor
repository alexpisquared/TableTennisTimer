@page "/tennis-timer"
@using System;
@using System.Diagnostics;
@using System.Media;
@using System.Threading.Tasks;
@using System.Timers;
@using Microsoft.AspNetCore.Components;
@using static System.Console;
@inject IJSRuntime JSRuntime

<PageTitle>TennisTimer</PageTitle>

<h1>Tennis Timer</h1>
<p>Countdown:<h1> @countdownString</h1></p>
<p>Next time:<h1> @nextHHMM</h1></p>
<p>Percent %:<h1> @percentComplete %</h1></p>
<p>---Report:<h3> @report</h3></p>
<p>----Error:<h3> @error</h3></p>

<audio id="sound2" autoplay controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
<br />
<button onclick="document.getElementById('Intro').play()">Play through Javascript</button>
<button @onclick="@ClickHandler">Play through C#</button>
<br />
<audio id="Intro" controls><source src="Audio/Start - Arcade Alarm.mp3" type="audio/mpeg"></audio>
<audio id="Power" controls><source src="Audio/Start - Arcade Power Up.7.mp3"></audio>
<audio id="Chirp" controls><source src="Audio/Start - Arcade Chirp Descend.mp3"></audio>
<audio id="Fanfare" controls><source src="Audio/Good - Fanfare.7.mp3"></audio>
<audio id="angryLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3"></audio>
<audio id="calmLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3"></audio>
<audio id="cheerfulLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3"></audio>
<audio id="gentleLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3"></audio>
<audio id="sadLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3"></audio>
<audio id="seriousLastMinute" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3" }></audio>
<audio id="angryRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="calmRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="cheerfulRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="gentleRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="sadRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="seriousRotate" controls><source src="Audio/zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"></audio>
<audio id="LockReleased" controls><source src="Audio/en-US-AriaNeural~1.00~100~whispering~Wake Lock released!.7.mp3"></audio>

@code {
  private string src = "Audio/Start - Arcade Alarm.mp3";
  private bool isLooping = true;
  private int everyXMin = 2;
  private string percentComplete = "%";
  private string countdownString = "··:··";
  private string report = "";
  private string error = "no error";
  private DateTime nextTime = DateTime.Now;
  private string nextHHMM = "88:88";
  private int[] playPeriods = new int[] { 2, 10, 15, 20, 30, 999 };
  private object? wakeLock;

  async void ClickHandler()
  {
    await JSRuntime.InvokeAsync<string>("PlayAudio", "Intro");
  }

  protected override async Task OnInitializedAsync()
  {
    WriteLine("protected override async void OnInitializedAsync() ▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀");
    await base.OnInitializedAsync();
    await MainLoopTask();
  }

  async Task MainLoopTask()
  {
    wakeLock = null;

    try
    {
      wakeLock = await JSRuntime.InvokeAsync<object>("navigator.wakeLock.request", "screen"); //todo: if nogo: https://dev.to/this-is-learning/how-to-prevent-the-screen-turn-off-after-a-while-in-blazor-4b29
      report = "Wake Lock is active!";
    }
    catch (Exception err)
    {
      error = $"{err.GetType().Name}, {err.Message}";
    }

    while (isLooping)
    {
      DateTime now = DateTime.Now;
      SetAndShowNextTime();

      while (isLooping && now < nextTime)
      {
        int prev = everyXMin;
        await Task.Delay(100);
        if (prev != everyXMin) // if the user changed the time, then reset the timer
        {
          SetAndShowNextTime();
        }

        now = DateTime.Now;
        double secondsLeft = (nextTime - now).TotalSeconds;
        countdownString = $"{Math.Floor(secondsLeft / 60):00}:{Math.Floor(secondsLeft % 60):00}";
        percentComplete = $"{((100 * (everyXMin * 60 - secondsLeft) / (everyXMin * 60))):N1}";

        if (secondsLeft <= 60 && secondsLeft > 56) // play a sound when there is 1 minute left
        {
          countdownString = "▓▓▓▓";
          await PlayWavFilesAsync(1);
        }

        StateHasChanged(); // await InvokeAsync(StateHasChanged);
      } // while (now < nextTime)

      if (isLooping)
      {
        countdownString = "▄▀▄▀";
        await PlayWavFilesAsync(2);
      }
      else
      {
        countdownString = "■ ■";
        error = "·";
      }
    } // while (isLooping)

    await Task.Delay(250); // collides with the "Wake Lock released" sound. ...on NG.
                           
    await PlayResourse("Chirp");
  }

  private void SetAndShowNextTime()
  {
    DateTime now = DateTime.Now;
    nextTime = now.AddMinutes(everyXMin - now.Minute % everyXMin).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
    nextHHMM = $"{nextTime.Hour:00}:{nextTime.Minute:00}";
  }

  async Task PlayWavFilesAsync(int i)
  {
    switch (i)
    {
      case 1:
        await PlayResourse("Power");
        await Task.Delay(2500);
        await PlayResourse(GetLastMinute());
        await Task.Delay(2000);
        break;
      default:
        await PlayResourse("Fanfare");
        await Task.Delay(5000);
        await PlayResourse(GetTimeToChange());
        await Task.Delay(1000);
        break;
    }
  }

  async Task ReleaseWakeLock()
  {
    if (wakeLock != null)
    {
      await JSRuntime.InvokeAsync<object>("navigator.wakeLock.release", wakeLock);
      report = "Wake Lock released";
      WriteLine("Wake Lock released ▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀");
      wakeLock = null;
      await PlayResourse("LockReleased");
      await Task.Delay(1000);
    }
  }

  async Task PlayResourse(string filePath)
  {    
    await JSRuntime.InvokeAsync<string>("PlayAudio", filePath);
  }

  string GetLastMinute()
  {
    string[] stringArr = new string[] {
      "angryLastMinute", //      "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Last minute! EQAQJ！.7.mp3",
      "calmLastMinute", //      "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Last minute! EQAQJ！.7.mp3",
      "cheerfulLastMinute", //      "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Last minute! EQAQJ！.7.mp3",
      "gentleLastMinute", //      "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Last minute! EQAQJ！.7.mp3",
      "sadLastMinute", //      "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Last minute! EQAQJ！.7.mp3",
      "seriousLastMinute" }; //      "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Last minute! EQAQJ！.7.mp3"};
    return stringArr[new Random().Next(stringArr.Length)];
  }

  string GetTimeToChange()
  {
    string[] stringArr = new string[] {
      "angryRotate", //       "Audio\\zh-CN-XiaomoNeural~1.00~100~angry~Time to rotate! DYRGOE！.7.mp3",
      "calmRotate", //       "Audio\\zh-CN-XiaomoNeural~1.00~100~calm~Time to rotate! DYRGOE！.7.mp3",
      "cheerfulRotate", //       "Audio\\zh-CN-XiaomoNeural~1.00~100~cheerful~Time to rotate! DYRGOE！.7.mp3",
      "gentleRotate", //       "Audio\\zh-CN-XiaomoNeural~1.00~100~gentle~Time to rotate! DYRGOE！.7.mp3",
      "sadRotate", //       "Audio\\zh-CN-XiaomoNeural~1.00~100~sad~Time to rotate! DYRGOE！.7.mp3",
      "seriousRotate" }; //       "Audio\\zh-CN-XiaomoNeural~1.00~100~serious~Time to rotate! DYRGOE！.7.mp3"};
  return stringArr[new Random().Next(stringArr.Length)];
  }

  async ValueTask DisposeAsync()
  {
    isLooping = false;
    await ReleaseWakeLock();
  }
  }
